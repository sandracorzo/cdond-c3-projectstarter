version: 2.1
orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string    
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend stack
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
       
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          branch_pattern: .+
          event: fail
          channel: $SLACK_DEFAULT_CHANNEL
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend test
          command: |
            cd backend
            npm install --save-dev jest-junit
            npm run test

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run backend scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run frotend test
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and zip utilities
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "back-end ip to ansible inventory"
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            echo ${BACKEND_IP} >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint from circleci ssh keys
      # attach workspace
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: 
            - "47:04:5b:d5:f3:4e:ce:95:d4:58:70:75:98:40:ed:c7"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cat .circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    

  run-migrations:
    docker:
      # Docker image that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - run:
          name: Run database migration
          command: |
            cd backend
            pwd
            npm install
            npm run migrations > migrations_log.txt
            cat migrations_log.txt
          no_output_timeout: 30m
      - run:
          name: Send database migration status
          command: |
            if grep "has been executed successfully" backend/migrations_log.txt;
            then
              echo "Database migration has been executed successfully"
            else
              echo "Database migration has failed, verify DB setup!"
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 

workflows:
  default:
    jobs:
      - build-frontend:
          context: slack
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
